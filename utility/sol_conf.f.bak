
      implicit none
      integer,parameter :: MI0=8, NI=200000
      integer,parameter :: MKI=1, nmkd=1
      integer :: nc,nprocs,u
      integer :: a,a0,i,j,k,n1,n2,m,n,m0,n0,MI,MB,ML1,ML2,ML3,ML0,ML
      integer :: NPROW,NPCOL,MBSIZE,NBSIZE,np1,np2,np3,NPCOL0
      integer :: Kion(NI),mkd(NI),Kion0(MI0),mkd0(MI0),np_2d(1:4)
      real(8) :: asi0(3,MI0),asi(3,NI),RR(3),aa(3,3)
      real(8) :: ax,ax0,mem

*
* input
*
      write(*,*) "input size of the unit cell : nc="
      read(*,*) nc

      write(*,*) "input # of nodes: np_2d(1:4) ="
      read(*,*) np_2d(1:4)

      nprocs=np_2d(1)*np_2d(2)*np_2d(3)*np_2d(4)
*
* # of meshes along one direction
*( If you need more dense grid points, you should be larger the paramter.)
*
      ML0=16

      np1=np_2d(1) ; np2=np_2d(2) ; np3=np_2d(3)

      m0=min(np1,np2)
      n0=max(np1,np2)
      m =m0
      n =n0
      do i=1,m
         k=mod(n,m)
         if ( k==0 ) then
            k=m
            exit
         else
            n=m
            m=k
         end if
      end do

      m0=min(k,np3)
      n0=max(k,np3)
      m =m0
      n =n0
      do i=1,m
         k=mod(n,m)
         if ( k==0 ) then
            k=m
            exit
         else
            n=m
            m=k
         end if
      end do

      m=k
      n=nc*ML0

      do i=1,n
         k=nc*m*i
         if ( k>=n ) exit
      end do

      write(*,*) "ML0=",k/nc

*
* # of atoms
*
      MI = MI0 * nc**3

*
* # of grid points
*
      ML1=ML0*nc ; ML2=ML0*nc ; ML3=ML0*nc

      ML=ML1*ML2*ML3

*
* # of bands
*
      MB=2*MI+nint(0.2d0*MI)

*
* parameters for SCALAPACK
*
      n      = np_2d(1)*np_2d(2)*np_2d(3)
      NPCOL0 = np_2d(1)*np_2d(2)*np_2d(3)*np_2d(4)
      NPCOL  = NPCOL0
      NPROW  = 1
      do i=2,n
         j=NPCOL0/i
         if ( i*j==NPCOL0 .and. i<=j .and. j-i<NPCOL-NPROW ) then
            NPCOL=j
            NPROW=i
         end if
      end do

      i=(MB+NPROW-1)/NPROW
      j=(MB+NPCOL-1)/NPCOL
      MBSIZE=min(i,j)
      NBSIZE=MBSIZE

      if ( NBSIZE*NPCOL/=MB ) then
         n=max( NBSIZE*NPCOL, MB )
         n=min( n, (NBSIZE+1)*NPCOL )
         MB=n
      end if

      NPROW=0
      NPCOL=0
      MBSIZE=0
      NBSIZE=0

*
* write parameters
*
      write(*,*) "# of nodes =",nprocs
      write(*,*) "# of atoms =",MI
      write(*,*) "# of grid points =",ML
      write(*,*) "# of eigenstates",MB

*
* memory estimation
*
      mem=2.d0*MB*dble(ML)/dble(nprocs)
      write(*,*) "memory estimation (GB) =",mem/1024.d0**3

*
* Lattice constant
*
      ax0 = 10.261d0
!      ax0 = 10.16d0
      ax  = ax0*nc

*
* Lattice vectors
*
      aa=0.d0
      aa(1,1)=1.d0
      aa(2,2)=1.d0
      aa(3,3)=1.d0

*
* atomic coorinates
*
      asi0(:,1)=(/0.00d0, 0.00d0, 0.00d0/)
      asi0(:,2)=(/0.25d0, 0.25d0, 0.25d0/)
      asi0(:,3)=(/0.50d0, 0.00d0, 0.50d0/)
      asi0(:,4)=(/0.00d0, 0.50d0, 0.50d0/)
      asi0(:,5)=(/0.50d0, 0.50d0, 0.00d0/)
      asi0(:,6)=(/0.75d0, 0.25d0, 0.75d0/)
      asi0(:,7)=(/0.25d0, 0.75d0, 0.75d0/)
      asi0(:,8)=(/0.75d0, 0.75d0, 0.25d0/)
      Kion0(:)=1
      mkd0(:)=1

      a=0
      do k=1,nc
      do j=1,nc
      do i=1,nc

         RR(1)=i-1 ; RR(2)=j-1 ; RR(3)=k-1

         do a0=1,MI0
            a=a+1
            asi(:,a)=RR+asi0(:,a0)
            Kion(a)=Kion0(a0)
            mkd(a)=mkd0(a0)
         end do

      end do
      end do
      end do

      if ( a/=MI ) then
         write(*,*) "a,MI=",a,MI
         stop
      end if

      do a=1,MI
         asi(1,a)=asi(1,a)/nc
         asi(2,a)=asi(2,a)/nc
         asi(3,a)=asi(3,a)/nc
      end do

*
* input file
*
      u=1
      rewind u
      write(u,'(a7)') "# RSDFT"
      write(u,'(a9," /")') "'LDAPZ81'"
      write(u,*) ax
      write(u,'(3f10.5)') aa(:,1)
      write(u,'(3f10.5)') aa(:,2)
      write(u,'(3f10.5)') aa(:,3)
      write(u,'(i4,i6,i4)') MKI,MI,nmkd
      do a=1,MI
         write(u,'(i4,3f15.10,i4)') Kion(a),asi(:,a),mkd(a)
      end do
      write(u,'(i2,3i8,f8.3," /")') 2, MB, 2*MI-2, MB, 0.d0
      write(u,'(3i2)') 2,2,2
      write(u,'(3i2)') 2,2,2
      write(u,'(3i5,6x,"/Diter,Diter1,Diter2")') 100,100,100
      write(u,'(6i3)') 3,3,4,4,0,1
      write(u,'(3i4)') 1,3,0
      write(u,'(2g11.3)') 1.d-15,1d-15
c      do k=1,MKI
c         write(u,'(2i4)') 2,2
c      end do
      write(u,'(3i5)') ML1,ML2,ML3
      write(u,'(i2)') 6
      do k=1,MKI
         write(u,'(i2)') 2
         write(u,'(a12)') "'Si_psv.dat'"
      end do
      write(u,'(i2,i3)') 3,4
      write(u,'(f6.3)') 0.05d0
      write(u,'(3f6.3)') 2.d0,1.d0,7.d0
      write(u,'(i2)') 2
      write(u,*) 1,0
      do k=1,nmkd
         write(u,'(3f6.3)') 0.d0,0.d0,0.d0
         write(u,'(3f6.3)') 0.d0,0.d0,0.d0
         write(u,'(3f6.3)') 0.d0,0.d0,0.d0
      end do
      write(u,'(3i4)') 0,6,5
      write(u,'(4g10.3)') 0.5d0,1.d-10,1.d-3,1.d-1
      write(u,'(g10.3," /")') 1.d-4
      write(u,'(5i5)') 0,100,0,0,0
      write(u,'(4i3)') 1,0,0,0
      write(u,'(4i5)') 0,0,0,3
      write(u,*) 1.d10
      write(u,'(i2,2x,a12)') 0,"'symdat_e'" 
      write(u,'(6i4,12x,"/ np_2d(1:5)")') np_2d(1:4),1,1
      write(u,'(2i4,2i7,3x,"/ NPROW,NPCOL,MBSIZE,NBSIZE")')
     &     NPROW,NPCOL,MBSIZE,NBSIZE
      write(u,*) 0

      stop
      end

